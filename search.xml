<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>原则的意义</title>
      <link href="/2020/03/18/yuan-ze-de-yi-yi/"/>
      <url>/2020/03/18/yuan-ze-de-yi-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 投资 </tag>
            
            <tag> 股市 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas条件筛选</title>
      <link href="/2020/03/14/pandas-tiao-jian-shai-xuan/"/>
      <url>/2020/03/14/pandas-tiao-jian-shai-xuan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-原始数据"><a href="#1-原始数据" class="headerlink" title="1. 原始数据"></a>1. 原始数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = pd.DataFrame(</span><br><span class="line">    np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>,<span class="number">4</span>)),</span><br><span class="line">    index=[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;西安&quot;</span>, <span class="string">&quot;成都&quot;</span>],</span><br><span class="line">    columns=[<span class="string">&quot;智障数量&quot;</span>, <span class="string">&quot;天才数量&quot;</span>, <span class="string">&quot;逗逼数量&quot;</span>, <span class="string">&quot;脑残数量&quot;</span>])</span><br></pre></td></tr></table></figure><p>Data：</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th><th>逗逼数量</th><th>脑残数量</th></tr></thead><tbody><tr><td>北京</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>上海</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>西安</td><td>9</td><td>10</td><td>11</td><td>12</td></tr><tr><td>成都</td><td>13</td><td>14</td><td>15</td><td>16</td></tr></tbody></table><h2 id="2-索引筛选"><a href="#2-索引筛选" class="headerlink" title="2. 索引筛选"></a>2. 索引筛选</h2><h3 id="1）使用单个值或者序列，可以筛选出多列数据"><a href="#1）使用单个值或者序列，可以筛选出多列数据" class="headerlink" title="1）使用单个值或者序列，可以筛选出多列数据"></a>1）使用单个值或者序列，可以筛选出多列数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[[<span class="string">&quot;智障数量&quot;</span>, <span class="string">&quot;天才数量&quot;</span>]]</span><br></pre></td></tr></table></figure><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th></tr></thead><tbody><tr><td>北京</td><td>1</td><td>2</td></tr><tr><td>上海</td><td>5</td><td>6</td></tr><tr><td>西安</td><td>9</td><td>10</td></tr><tr><td>成都</td><td>13</td><td>14</td></tr></tbody></table><h3 id="2）使用切片的方式针对数据进行筛选"><a href="#2）使用切片的方式针对数据进行筛选" class="headerlink" title="2）使用切片的方式针对数据进行筛选"></a>2）使用切片的方式针对数据进行筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[: <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th><th>逗逼数量</th><th>脑残数量</th></tr></thead><tbody><tr><td>北京</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>上海</td><td>5</td><td>6</td><td>7</td><td>8</td></tr></tbody></table><h3 id="3）Pandas接受bool数组进行切片筛选"><a href="#3）Pandas接受bool数组进行切片筛选" class="headerlink" title="3）Pandas接受bool数组进行切片筛选"></a>3）Pandas接受bool数组进行切片筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_bool = data[[<span class="string">&quot;逗逼数量&quot;</span>] &gt; <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>生成bool数组, df_bool确定需要保留的数据:</p><table><thead><tr><th>北京</th><th>FALSE</th></tr></thead><tbody><tr><td>上海</td><td>TRUE</td></tr><tr><td>西安</td><td>TRUE</td></tr><tr><td>成都</td><td>TRUE</td></tr></tbody></table><p>bool数据作为索引对数据进行筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[df_bool]</span><br></pre></td></tr></table></figure><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th><th>逗逼数量</th><th>脑残数量</th></tr></thead><tbody><tr><td>上海</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>西安</td><td>9</td><td>10</td><td>11</td><td>12</td></tr><tr><td>成都</td><td>13</td><td>14</td><td>15</td><td>16</td></tr></tbody></table><h2 id="loc和iloc进行数据筛选"><a href="#loc和iloc进行数据筛选" class="headerlink" title="loc和iloc进行数据筛选"></a>loc和iloc进行数据筛选</h2><h3 id="loc使用标签索引获取数据"><a href="#loc使用标签索引获取数据" class="headerlink" title="loc使用标签索引获取数据"></a>loc使用标签索引获取数据</h3><p>使用loc可以类似于使用bool数据对dataframe数据进行筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[df_bool]</span><br></pre></td></tr></table></figure><p>筛选后可以获得与data[df_bool]一样的结果</p><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th><th>逗逼数量</th><th>脑残数量</th></tr></thead><tbody><tr><td>上海</td><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>西安</td><td>9</td><td>10</td><td>11</td><td>12</td></tr><tr><td>成都</td><td>13</td><td>14</td><td>15</td><td>16</td></tr></tbody></table><p>loc也可以对多行列的数据进行直接筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>], [<span class="string">&quot;智障数量&quot;</span>,<span class="string">&quot;天才数量&quot;</span>]]</span><br></pre></td></tr></table></figure><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th></tr></thead><tbody><tr><td>北京</td><td>1</td><td>2</td></tr><tr><td>上海</td><td>5</td><td>6</td></tr></tbody></table><h3 id="iloc使用数据位置进行筛选"><a href="#iloc使用数据位置进行筛选" class="headerlink" title="iloc使用数据位置进行筛选"></a>iloc使用数据位置进行筛选</h3><p>iloc也可以对多行列的数据进行直接筛选，对应loc的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th></tr></thead><tbody><tr><td>北京</td><td>1</td><td>2</td></tr><tr><td>上海</td><td>5</td><td>6</td></tr></tbody></table><p>iloc的索引功能也可以用于切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[:, :<span class="number">3</span>][data.智障数量 &gt; <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>data:</p><table><thead><tr><th></th><th>智障数量</th><th>天才数量</th><th>逗逼数量</th></tr></thead><tbody><tr><td>上海</td><td>5</td><td>6</td><td>7</td></tr><tr><td>西安</td><td>9</td><td>10</td><td>11</td></tr><tr><td>成都</td><td>13</td><td>14</td><td>15</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataFrame对行和列求和及添加新行和列</title>
      <link href="/2020/02/26/dataframe-dui-xing-he-lie-qiu-he-ji-tian-jia-xin-xing-he-lie/"/>
      <url>/2020/02/26/dataframe-dui-xing-he-lie-qiu-he-ji-tian-jia-xin-xing-he-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Excel数据格式如下-从Excel文件中获取数据："><a href="#1-Excel数据格式如下-从Excel文件中获取数据：" class="headerlink" title="1. Excel数据格式如下,从Excel文件中获取数据："></a>1. Excel数据格式如下,从Excel文件中获取数据：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(io=<span class="string">&quot;test.xlsx&quot;</span>, sheet_name=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>0</td><td>58</td><td>-5</td><td>19</td><td>-5</td></tr><tr><td>1</td><td>15</td><td>98</td><td>38</td><td>43</td></tr><tr><td>2</td><td>58</td><td>21</td><td>19</td><td>1</td></tr><tr><td>3</td><td>16</td><td>28</td><td>84</td><td>60</td></tr><tr><td>4</td><td>92</td><td>99</td><td>89</td><td>98</td></tr><tr><td>5</td><td>61</td><td>37</td><td>53</td><td>97</td></tr><tr><td>6</td><td>60</td><td>14</td><td>79</td><td>99</td></tr></tbody></table><h3 id="2-计算各行和各列的和并增加新列和新行作为记录"><a href="#2-计算各行和各列的和并增加新列和新行作为记录" class="headerlink" title="2. 计算各行和各列的和并增加新列和新行作为记录"></a>2. 计算各行和各列的和并增加新列和新行作为记录</h3><h4 id="方法一-借助lamda表达式"><a href="#方法一-借助lamda表达式" class="headerlink" title="方法一: 借助lamda表达式"></a>方法一: 借助lamda表达式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;合计&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">sum</span>(), axis=<span class="number">1</span>)</span><br><span class="line">df.loc[<span class="string">&quot;合计&quot;</span>] = df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure><h4 id="方法二-借助np-sum函数"><a href="#方法二-借助np-sum函数" class="headerlink" title="方法二: 借助np.sum函数"></a>方法二: 借助np.sum函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;合计&quot;</span>] = df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">1</span>)</span><br><span class="line">df.loc[<span class="string">&quot;合计&quot;</span>] = df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="两种方法输出相同："><a href="#两种方法输出相同：" class="headerlink" title="两种方法输出相同："></a>两种方法输出相同：</h4><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th><th>合计</th></tr></thead><tbody><tr><td>0</td><td>58</td><td>-5</td><td>19</td><td>-5</td><td>67</td></tr><tr><td>1</td><td>15</td><td>98</td><td>38</td><td>43</td><td>195</td></tr><tr><td>2</td><td>58</td><td>21</td><td>19</td><td>1</td><td>101</td></tr><tr><td>3</td><td>16</td><td>28</td><td>84</td><td>60</td><td>191</td></tr><tr><td>4</td><td>92</td><td>99</td><td>89</td><td>98</td><td>382</td></tr><tr><td>5</td><td>61</td><td>37</td><td>53</td><td>97</td><td>253</td></tr><tr><td>6</td><td>60</td><td>14</td><td>79</td><td>99</td><td>258</td></tr><tr><td>合计</td><td>360</td><td>292</td><td>381</td><td>393</td><td>1426</td></tr></tbody></table><p>关于dataframe 的apply()函数用法可以<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply">参考这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> DataFrame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas数据预处理</title>
      <link href="/2020/02/24/pandas-shu-ju-yu-chu-li/"/>
      <url>/2020/02/24/pandas-shu-ju-yu-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-原始数据表"><a href="#1-原始数据表" class="headerlink" title="1. 原始数据表"></a>1. 原始数据表</h2><p>创建测试数据表 test.xlsx：</p><table><thead><tr><th align="left">时间</th><th align="left">项目经理</th><th align="left">预算</th><th align="left">设备数量</th><th>设备单价</th></tr></thead><tbody><tr><td align="left">2020-01-24</td><td align="left">张三</td><td align="left">2670</td><td align="left">2</td><td>1000</td></tr><tr><td align="left">2019-12-27</td><td align="left">李四</td><td align="left">283.1</td><td align="left">3</td><td>80</td></tr><tr><td align="left">2019-12-27</td><td align="left">王二</td><td align="left">0</td><td align="left">1</td><td>0</td></tr><tr><td align="left"></td><td align="left">张三</td><td align="left">25</td><td align="left">4</td><td>5</td></tr></tbody></table><h2 id="2-读取数据表获取DataFrame并进行数据预处理"><a href="#2-读取数据表获取DataFrame并进行数据预处理" class="headerlink" title="2. 读取数据表获取DataFrame并进行数据预处理"></a>2. 读取数据表获取DataFrame并进行数据预处理</h2><ol><li>直接使用read_excel()获取test.xlsx的dataframe格式数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从EXCEL文件中读取数据并打印column类型</span></span><br><span class="line">df = pd.read_excel(io=<span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 输出 DataFrame</span><br><span class="line"></span><br><span class="line">        时间  项目经理    预算  设备数量  设备单价</span><br><span class="line">0 2020-01-24     张三  2670.0        2     1000</span><br><span class="line">1 2019-12-27     李四   283.1        3       80</span><br><span class="line">2 2019-12-27     王二     0.0        1        0</span><br><span class="line">3        NaN     张三    25.0        4        5</span><br><span class="line"></span><br><span class="line"># 输出column类型</span><br><span class="line"></span><br><span class="line">时间         object</span><br><span class="line">项目经理     object</span><br><span class="line">预算        float64</span><br><span class="line">设备数量      int64</span><br><span class="line">设备单价      int64</span><br></pre></td></tr></table></figure><p>根据输出结果可以查看数据类型及，接下来要对数据的格式及形势进行预处理，以满足数据分析的需求。下面分几个步骤针对几种场景做数据预处理</p><ol start="2"><li>新增Column列设备价格，需要每行数据都进行一次设备数量×设备单价并新增Column索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;设备总价&quot;</span>] = df[<span class="string">&quot;设备数量&quot;</span>] * df[<span class="string">&quot;设备单价&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># df</span><br><span class="line"></span><br><span class="line">         时间 项目经理    预算  设备数量  设备单价  设备总价</span><br><span class="line">0  2020-01-24    张三  2670.0        2     1000      2000</span><br><span class="line">1  2019-12-27    李四   283.1        3       80       240</span><br><span class="line">2  2019-12-27    王二     0.0        1        0         0</span><br><span class="line">3         NaN    张三    25.0        4        5        20</span><br></pre></td></tr></table></figure><ol start="3"><li>对df中的NaN数据进行替换，使用fillna()函数，根据isna函数中的参数inplace来确定是否替换原数据中的数据，本例中将时间中空的项进行替换替换成当前日期，并对时间column进行类型转换表，转换为datetime类型，使用to_datetime，转换完成后查看数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(datetime.date.today(), inplace=<span class="literal">True</span>) </span><br><span class="line">df[<span class="string">&quot;时间&quot;</span>] = pd.to_datetime(arg=df[<span class="string">&quot;时间&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;%Y/%m/%d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df, df.dtypes)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 输出空值已被替换</span><br><span class="line"></span><br><span class="line">         时间 项目经理    预算  设备数量  设备单价  设备总价</span><br><span class="line">0  2020-01-24    张三  2670.0        2     1000      2000</span><br><span class="line">1  2019-12-27    李四   283.1        3       80       240</span><br><span class="line">2  2019-12-27    王二     0.0        1        0         0</span><br><span class="line">3  2020-02-24    张三    25.0        4        5        20</span><br><span class="line"></span><br><span class="line"># 时间列类型已经转换为Datetime</span><br><span class="line"></span><br><span class="line">时间        datetime64[ns]</span><br><span class="line">项目经理            object</span><br><span class="line">预算               float64</span><br><span class="line">设备数量             int64</span><br><span class="line">设备单价             int64</span><br><span class="line">设备总价             int64</span><br></pre></td></tr></table></figure><h2 id="3-数据index替换"><a href="#3-数据index替换" class="headerlink" title="3. 数据index替换"></a>3. 数据index替换</h2><p>获取数据后为了方便分析或者标注，在初始阶段对index(行)和columns(列)名称可以进行替换，方法为datafream.index &#x3D; list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.index = [<span class="string">&quot;项目A&quot;</span>, <span class="string">&quot;项目B&quot;</span>, <span class="string">&quot;项目C&quot;</span>, <span class="string">&quot;项目X&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Index已被替换</span><br><span class="line"></span><br><span class="line">             时间 项目经理    预算  设备数量  设备单价  设备总价</span><br><span class="line">项目A  2020-01-24    张三  2670.0        2     1000      2000</span><br><span class="line">项目B  2019-12-27    李四   283.1        3       80       240</span><br><span class="line">项目C  2019-12-27    王二     0.0        1        0         0</span><br><span class="line">项目X  2020-02-24    张三    25.0        4        5        20</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>在获取数据之后可以使用DataFrame的许多内建方法对数据进行预处理，虽然Python提供了非常方便的迭代式、推导式等工具，但是使用Pandas时充分利用其内建方法能够更加快速精炼的达到目的，笔者当初为了对数据进行日期格式转换，习惯的使用了嵌套列表推导式，实际上效率又低并且可读性也很差。相关的DataFrame结构的方法很属性非常多，详细请参考<a href="https://pandas.pydata.org/pandas-docs/stable/reference/frame.html">官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> DataFrame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas提取Excel数据</title>
      <link href="/2020/02/23/pandas-ti-qu-excel-shu-ju/"/>
      <url>/2020/02/23/pandas-ti-qu-excel-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="1-原始数据表"><a href="#1-原始数据表" class="headerlink" title="1. 原始数据表"></a>1. 原始数据表</h2><p>创建测试数据表 test.xlsx：</p><table><thead><tr><th>时间</th><th>项目经理</th><th>预算</th><th>设备数量</th></tr></thead><tbody><tr><td>2020-01-24</td><td>张三</td><td>2670</td><td>2</td></tr><tr><td>2019-12-27</td><td>李四</td><td>283.1</td><td>3</td></tr><tr><td>2019-12-27</td><td>王二</td><td>0</td><td>1</td></tr><tr><td></td><td>张三</td><td>25</td><td>4</td></tr></tbody></table><h2 id="2-使用Pandas的read-excel-函数读取原始数据表中的数据"><a href="#2-使用Pandas的read-excel-函数读取原始数据表中的数据" class="headerlink" title="2. 使用Pandas的read_excel()函数读取原始数据表中的数据"></a>2. 使用Pandas的read_excel()函数读取原始数据表中的数据</h2><p>read_excel()函数可以直接读取excel文件并返回pandas的dataframe数组，index标签默认为行号，columns标签默认为excel表中的第一行，默认读取第一个sheet的数据，可以根据sheet名或者序号进行sheet的索引。<br>官方文档的参数说明请<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html#pandas.read_excel">点击这里</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从EXCEL文件中读取数据</span></span><br><span class="line">df = pd.read_excel(io=<span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 DataFrame</span></span><br><span class="line">         时间 项目经理    预算  设备数量</span><br><span class="line"><span class="number">0</span>  <span class="number">2020</span>-01-<span class="number">24</span>    张三  <span class="number">2670.0</span>       <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2019</span>-<span class="number">12</span>-<span class="number">27</span>    李四   <span class="number">283.1</span>       <span class="number">3</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2019</span>-<span class="number">12</span>-<span class="number">27</span>    王二     <span class="number">0.0</span>       <span class="number">1</span></span><br><span class="line"><span class="number">3</span>         NaN    张三    <span class="number">25.0</span>       <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-读取数据的数据类型"><a href="#3-读取数据的数据类型" class="headerlink" title="3. 读取数据的数据类型"></a>3. 读取数据的数据类型</h2><p>Dataframe 拥有属性dtypes可以查看column数据类型，整数对应int64，浮点数对应float64等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出column与对应的数据类型</span></span><br><span class="line">时间         <span class="built_in">object</span></span><br><span class="line">项目经理     <span class="built_in">object</span></span><br><span class="line">预算        float64</span><br><span class="line">设备数量      int64</span><br></pre></td></tr></table></figure><h2 id="4-时间的读取"><a href="#4-时间的读取" class="headerlink" title="4. 时间的读取"></a>4. 时间的读取</h2><p>根据读取的数据可以看到时间未对应到datetime数据类型，根据read_excel函数的官方文档，函数的参数:<br><strong>parse_dates</strong>: bool, list-like, or dict, default False<br>可以将指定column设置为时间类型，本例使用list格式修改时间column为datetime格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(io=<span class="string">&quot;test.xlsx&quot;</span>, parse_dates=[<span class="string">&quot;时间&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">时间        datetime64[ns]</span><br><span class="line">项目经理            <span class="built_in">object</span></span><br><span class="line">预算               float64</span><br><span class="line">设备数量             int64</span><br></pre></td></tr></table></figure><h3 id="目前本人使用的项目仅用到以上举例的用法及参数，参考官方文档read-excel函数可以有多种参数设定以应对各种不同的数据提取需求。"><a href="#目前本人使用的项目仅用到以上举例的用法及参数，参考官方文档read-excel函数可以有多种参数设定以应对各种不同的数据提取需求。" class="headerlink" title="目前本人使用的项目仅用到以上举例的用法及参数，参考官方文档read_excel函数可以有多种参数设定以应对各种不同的数据提取需求。"></a>目前本人使用的项目仅用到以上举例的用法及参数，参考官方文档read_excel函数可以有多种参数设定以应对各种不同的数据提取需求。</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程项目管理数据分析系统</title>
      <link href="/2020/02/16/gong-cheng-xiang-mu-guan-li-shu-ju-fen-xi-xi-tong/"/>
      <url>/2020/02/16/gong-cheng-xiang-mu-guan-li-shu-ju-fen-xi-xi-tong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> Sqlite </tag>
            
            <tag> ChinaMobile </tag>
            
            <tag> Data Processing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
